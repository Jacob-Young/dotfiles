# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Profiing Step 1
# zmodload zsh/zprof
#
# Speed up zsh
# https://blog.mattclemente.com/2020/06/26/oh-my-zsh-slow-to-load/#handling-virtual-environments

# =============================================================================
# PATH
# =============================================================================

# Path to your oh-my-zsh installation.
export ZSH=~/.oh-my-zsh
# NVIM
export EDITOR="lvim"
export MYNVIMRC=$HOME/.config/nvim/init.vim
export NEWRC=$HOME/.config/nvim/new-init.lua
# SSH
export SSH_KEY_PATH="~/.ssh/id_rsa"
# Go path
export GOPATH="$HOME/go"
export GO111MODULE='auto'
# PATH
export PATH="$PATH:$MY_INSTALL_DIR/bin" # Zoom
export PATH=$PATH:/$HOME/.local/bin
export PATH=$PATH:/opt/homebrew/bin
export PATH=$PATH:/usr/local/bin
export PATH=$PATH:/usr/local/sbin
export PATH=$PATH:/usr/local/MacGPG2/bin
# Pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
# Yarn
export PATH="$HOME/.yarn/bin:$PATH"
# Deno
export PATH="$HOME/.deno/bin:$PATH"
# Android Development
export ANDROID_HOME=$HOME/Library/Android/sdk
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/tools
export PATH=$PATH:$ANDROID_HOME/tools/bin
export PATH=$PATH:$ANDROID_HOME/platform-tools
# $GOPATH/bin
export PATH=$PATH:$GOPATH/bin

# =============================================================================
# ENVIRONMENT VARIABLES
# =============================================================================

export HOMEBREW_NO_ANALYTICS=1
# Manpages path
export MANPATH="/usr/local/share/man:$MANPATH"
# Tell homebrew to install cask applications to root applications folder
export HOMEBREW_CASK_OPTS="--appdir=/Applications"
# FZF should search hidden files and ignore case
export FZF_DEFAULT_COMMAND='rg --files --hidden --smart-case --follow --glob "!.git/*"'
# Disable annoying pyenv prompt
export VIRTUAL_ENV_DISABLE_PROMPT=1
# Keybase Developer Tools Chrome Extension
unset KEYBASE_PERF
export KEYBASE_LOCAL_DEBUG=1
export KEYBASE_DEV_TOOL_ROOTS="$HOME/Library/Application Support/Google/Chrome/Profile 3/Extensions/hgldghadipiblonfkkicmgcbbijnpeog,$HOME/Library/Application Support/Google/Chrome/Profile 3/Extensions/fmkadmapgofadopljbjfkapdkoienihi"
# Zoom configuration
export MY_INSTALL_DIR="$HOME/local"
export PKG_CONFIG_PATH=$HOME/local/lib/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/opt/openssl/lib/pkgconfig

# ===============================================
# SOURCES
# ===============================================

# Keybase ZSHRC scripts for setup
# Note: This file is stored in a pricvate keybase directory. In order for ZSH
# to pick up on this file, the KBFS volume will need to be mounted
# source /Volumes/Keybase/team/jry.zed/dotfiles/.zshrc.keybase

# SSH Find Agent Script
# https://github.com/wwalker/ssh-find-agent/blob/master/ssh-find-agent.sh
source $HOME/.scripts/ssh-find-agent.sh

# Source scripts found in dotfiles/scripts (symlinked to $HOME/.scripts/)h

# =============================================================================
# ZSH THEME
# =============================================================================

# Look in ~/.oh-my-zsh/themes/
# time that oh-my-zsh is loaded.
ZSH_THEME="powerlevel10k/powerlevel10k"

# =============================================================================
# FZF-TAB CONFIGURATION
# =============================================================================

# disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false
# set descriptions format to enable group support
zstyle ':completion:*:descriptions' format '[%d]'
# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# preview directory's content with exa when completing cd
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'
# switch group using `,` and `.`
zstyle ':fzf-tab:*' switch-group ',' '.'
# bind alt-space to select-multiple
zstyle ':fzf-tab:*' fzf-bindings 'right:toggle'

# =============================================================================
# OH MY ZSH CONFIG
# =============================================================================

DEFAULT_USER=`whoami`

# Uncomment the following line to use case-sensitive completion.
CASE_SENSITIVE="false"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
export UPDATE_ZSH_DAYS=14

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="false"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Other performance improvements
# Reference: https://github.com/jonluca/dotfiles
skip_global_compinit=1
ZSH_DISABLE_COMPFIX=true

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  fzf-tab
  # https://github.com/mroth/evalcache
  # $ZSH_EVALCACHE_DIR: cache files storage, default $HOME/.zsh-evalcache.
  # $ZSH_EVALCACHE_DISABLE: set to true if you wish to bypass evalcache.
  # There is a convenience function to clear the cache called _evalcache_clear.
  evalcache
  git
  common-aliases
  zsh-autosuggestions
)

# =============================================================================
# OH MY ZSH SOURCING
# =============================================================================

source $ZSH/oh-my-zsh.sh

# =============================================================================
# FUNCTIONS
# =============================================================================

# Add all functions in ~/.functions to system path
export PATH="$HOME/.functions:$PATH"

ssh_find_agent --auto
if [ -z "$SSH_AUTH_SOCK" ]
then
   eval $(ssh-agent) > /dev/null
   ssh-add -l >/dev/null || alias ssh='ssh-add -l >/dev/null || ssh-add && unalias ssh; ssh'
fi

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
fi

# Automatically ls after cd
function cs()
{
  if [ $# -eq 0 ]; then
    cd && ll
  else
    cd "$*" && ll
  fi
}

function timezsh() {
  shell=${1-$SHELL}
  for i in $(seq 1 10); do /usr/bin/time $shell -i -c exit; done
}

jobscount() {
  # local stopped=$(jobs -sp | wc -l)
  # local running=$(jobs -rp | wc -l)
  local total=$(jobs -p | wc -l | tr -d ' ')
  echo "${total}"
}

# Forwhatever reason, ZSH has an alias to `nocorrect man` in macOS catalina
unalias man
# Customize man pages color
man() {
  env \
      LESS_TERMCAP_mb=$'\e[1;31m' \
      LESS_TERMCAP_md=$'\e[1;31m' \
      LESS_TERMCAP_me=$'\e[0m' \
      LESS_TERMCAP_se=$'\e[0m' \
      LESS_TERMCAP_so=$'\e[1;44;33m' \
      LESS_TERMCAP_ue=$'\e[0m' \
      LESS_TERMCAP_us=$'\e[1;32m' \
          man "$@"
}

# =============================================================================
# ALIASES
# =============================================================================

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
alias n='lvim'
alias irb='irb --simple-prompt'
alias lg='lazygit'
alias kk='clear'
alias gc='git commit -v -S'
alias gcob='gco -b'
alias gd='git difftool'
alias gdc='git difftool --cached'
alias grbsign="git rebase --exec 'git commit --amend --no-edit -n -S' -i"
alias ggpush='git push -u origin $(git_current_branch)'
alias bgrep='/usr/bin/grep --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn}'
alias htop='btm'

# ===============================================
# VERSION MANAGERS
# ===============================================

# Pyenv
#
# Init pyenv-virtualenv, but unload precmd hook _pyenv_virtualenv_hook
#
# Using --no-rehash in an attempt to speed up pyenv
# https://github.com/pyenv/pyenv/issues/1157#issuecomment-418446159
#
# Using evalcache to speed up pyenv and virtualenv
# https://github.com/mroth/evalcache
_evalcache pyenv init -
_evalcache pyenv virtualenv-init -
# eval "$(pyenv init - --no-rehash)"
# eval "$(pyenv virtualenv-init -)"

# Warning: unloading the following hook breaks command
# `pyenv activate/deactivate`. Please switch to
# `pyenv shell env_name`, `pyenv shell --unset` instead.
if [[ -n $ZSH_VERSION ]]; then
  autoload -Uz add-zsh-hook
  add-zsh-hook -D precmd _pyenv_virtualenv_hook
fi
if [[ -n $BASH_VERSION ]]; then
  PROMPT_COMMAND="${PROMPT_COMMAND/_pyenv_virtualenv_hook;/}"
fi

# Node Version Manager
export NVM_DIR="$HOME/.nvm"

# # ===============================================
# THEME
# # ===============================================

## # ORDER
#SPACESHIP_PROMPT_ORDER=(

#  user
#  host
#  dir
#  git
#  hg
#  node
#  elixir
#  xcode
#  swift
#  golang
#  rust
#  haskell
#  docker
#  venv
#  exec_time
#  line_sep
#  vi_mode
#  jobs
#  exit_code
#  char
#)

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# bun completions
[ -s "/Users/CASE/.bun/_bun" ] && source "/Users/CASE/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"


# Force ZSH to use Arm64 architecture by default.
# This is helpful for homebrew, TreeSitter, and other local developer tools to
# compile for arm64 by default.
# Switching to x86 can be done manually via
#
# env /use/bin/arch -i386 /bin/zsh --login

if [ "$(uname -m)" != "arm64" ]; then
  env arch -arm64 /bin/zsh --login
fi
