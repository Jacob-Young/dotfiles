# ===============================================
# Containers declarations
# ===============================================
snippet scont "React (Redux) container component" b
import React, { Component } from 'react'
import {  } from 'prop-types'
import { connect } from 'react-redux'
import { bindActionCreators } from 'redux'


const mapStateToProps = (state) => (
	{
	}
)

const mapDispatchToProps = (dispatch) => (
	{
		actions: bindActionCreators()
	}
)

class $1 extends Component {
	static propTypes = {

	}

	render () {
		return (
			${3:<Data data={this.props.data} />}
		)
	}
}


export default connect(
	mapStateToProps,
	mapDispatchToProps
)($1)
endsnippet

snippet fcont "React (Redux) function container" b
import React from 'react'
import {  } from 'prop-types'
import { connect } from 'react-redux'
import { bindActionCreators } from 'redux'

const mapStateToProps = (state) => (
	{
	}
)

const mapDispatchToProps = (dispatch) => (
	{
		actions: bindActionCreators()
	}
)

const ${1:Component} = (props) => {
	const { ${2:prop} } = props.$2
	return (
		${3:<Data data={data} />}
	)
}

$1.propTypes = {}

export default connect(
	mapStateToProps,
	mapDispatchToProps
)($1)
endsnippet

# ===============================================
# Action creators/types
# ===============================================
snippet acp "Redux action creator (w/payload)"
export const ${1:actionName} = ($2) => ({
	type: ActionTypes.${3:ACTION_TYPE},
	error: false,
	payload: $2
})
endsnippet

snippet acs "Redux action creator (simple)"
export const ${1:actionName} = () => ({
	type: ActionTypes.${3:ACTION_TYPE}
})
endsnippet

snippet at "Action type" b
${1:KEY}: '$1'
endsnippet

# ===============================================
# Reducers
# ===============================================
snippet rred "Redux root reducer"
import { combineReducers } from 'redux'
import { routerReducer } from 'react-router-redux'
import dataReducer from './dataReducer'

const rootReducer = combineReducers({
	data: dataReducer
})

export default rootReducer
endsnippet

snippet red "Redux reducer"
import ActionTypes from 'constants/ActionTypes'

const initialState = {
	data: [],
	fetching: false
}

const ${1:dataReducer} = (state = initialState, action) => {
	switch (action.type) {
		case ActionTypes.${2:ACTION_TYPE}: {
			return state
		}
		default: {
			return state
		}
	}
}

export default $1
endsnippet

# ===============================================
# Selectors
# ===============================================
snippet sel "Redux state selector"
${1:export} const ${2:selectorName} = state => state.$3
endsnippet

snippet rsel "Redux computed state re-selector (using reselect)"
export const ${1:computedSelectorName} = createSelector(
	[ ${2:usedSelector}, ${3:usedSelector2} ],
	($2, $3) => {
		$4
	}
)
endsnippet

# ===============================================
# Misc
# ===============================================
snippet mstp "Map state to props (Redux)"
const mapStateToProps = (state, _ownProps) => ({
	${1:prop}: state.prop
})
endsnippet

snippet mdtp "Map dispatch to props (Redux)"
const mapDispatchToProps = (dispatch, _ownProps) => ({
	onEvent() {
		dispatch(${1:action()})
	}
})
endsnippet
